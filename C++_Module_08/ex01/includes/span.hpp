/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   span.hpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: galambey <galambey@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/03/28 13:55:59 by galambey          #+#    #+#             */
/*   Updated: 2024/03/28 18:33:05 by galambey         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef SPAN_HPP
# define SPAN_HPP

# include <iostream>
# include <vector>
# include <algorithm>

class Span {
	
	private :

		unsigned int const _size_max;
		unsigned int _nb_elem;
		std::vector<int> _span;
		
		/* ***************************************************************** */
		/* ******************** Constructor & Destructor ******************* */
		/* ***************************************************************** */

		Span();
		
		/* ***************************************************************** */
		/* *************************** EXCEPTIONS ************************** */
		/* ***************************************************************** */

		class NotFoundValueException : public std::exception {
			const char * what() const throw();
		};
		
		class SpanAlreadyFullException : public std::exception {
			const char * what() const throw();
		};
		
	public :
	
		/* ***************************************************************** */
		/* ******************** Constructor & Destructor ******************* */
		/* ***************************************************************** */

		Span(Span const & orig);
		Span(unsigned int N);
		~Span();

		/* ***************************************************************** */
		/* ********************** OPERATOR OVERLOADING ********************* */
		/* ***************************************************************** */

		/* ********************** Assignment Operator ********************** */
		
		Span & operator=(Span const & rhs);
		
		/* ***************************************************************** */
		/* **************************** Actions **************************** */
		/* ***************************************************************** */

		void	addNumber(int nb);
		int		shortestSpan() const;
		int		longestSpan() const;
} ;

#endif
