/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Serializer.cpp                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garance <garance@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/03/21 10:25:37 by garance           #+#    #+#             */
/*   Updated: 2024/03/21 12:08:00 by garance          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

# include "../includes/Serializer.hpp"

/* ************************************************************************* */
/* ************************ Constructor & Destructor *********************** */
/* ************************************************************************* */

Serializer::Serializer() {};

Serializer::Serializer(Serializer const & orig) { (void) orig; };

Serializer::~Serializer() {};

/* ************************************************************************* */
/* ************************** OPERATOR OVERLOADING ************************* */
/* ************************************************************************* */

/* ************************** Assignment Operator  ************************* */

Serializer & Serializer::operator=(Serializer const & rhs) {
    (void) rhs;
    return (*this);
}

/* ************************************************************************* */
/* ******************************** Actions ******************************** */
/* ************************************************************************* */

uintptr_t Serializer::serialize(Data * ptr) {
    return (reinterpret_cast<uintptr_t>(ptr));
}

Data * Serializer::deserialize(uintptr_t raw) {
    return (reinterpret_cast<Data*>(raw));
}